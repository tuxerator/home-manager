(defwidget bar []
  (centerbox :orientation "h" :class "bar-box"
    (workspaces)
    (music)
    (sidestuff)))

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    (systray :class "systray")
    (metric :label "${volume <= 0 ? '󰖁' :
                volume < 35 ? '󰕿' :
                volume < 70 ? '󰖀' : '󰕾'}"
            :value volume
            :onchange "amixer -D pulse sset Master {}%")
    (metric :label ""
            :value {EWW_RAM.used_mem_perc}
            :onchange "")
    (metric :label "💾"
            :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
            :onchange "")
    (bat) 
    (time)))

(defwidget workspaces []
  (box :class "workspaces"
       :orientation "h"
       :space-evenly true
       :halign "start"
       :spacing 10
    (button :onclick "wmctrl -s 0" 1)
    (button :onclick "wmctrl -s 1" 2)
    (button :onclick "wmctrl -s 2" 3)
    (button :onclick "wmctrl -s 3" 4)
    (button :onclick "wmctrl -s 4" 5)
    (button :onclick "wmctrl -s 5" 6)
    (button :onclick "wmctrl -s 6" 7)
    (button :onclick "wmctrl -s 7" 8)
    (button :onclick "wmctrl -s 8" 9)))

(defwidget music []
  (box :class "music"
       :orientation "h"
       :space-evenly false
       :halign "center"
    {music != "" ? "🎵${music}" : ""}))


(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))


(defwidget bat []
  (eventbox :onhover "eww update bat=true"
    (box :class "metric"
    :onhoverlost "eww update bat=false"
    "${(EWW_BATTERY["BAT0"].capacity + EWW_BATTERY["BAT1"].capacity) / 2 < 10 ? '󱃍' :
      (EWW_BATTERY["BAT0"].capacity + EWW_BATTERY["BAT1"].capacity) / 2 < 20 ? '󰁻' :
      (EWW_BATTERY["BAT0"].capacity + EWW_BATTERY["BAT1"].capacity) / 2 < 30 ? '󰁼' :
      (EWW_BATTERY["BAT0"].capacity + EWW_BATTERY["BAT1"].capacity) / 2 < 40 ? '󰁽' :
      (EWW_BATTERY["BAT0"].capacity + EWW_BATTERY["BAT1"].capacity) / 2 < 50 ? '󰁾' :
      (EWW_BATTERY["BAT0"].capacity + EWW_BATTERY["BAT1"].capacity) / 2 < 60 ? '󰁿' :
      (EWW_BATTERY["BAT0"].capacity + EWW_BATTERY["BAT1"].capacity) / 2 < 70 ? '󰂀' :
      (EWW_BATTERY["BAT0"].capacity + EWW_BATTERY["BAT1"].capacity) / 2 < 80 ? '󰂁' :
      (EWW_BATTERY["BAT0"].capacity + EWW_BATTERY["BAT1"].capacity) / 2 < 90 ? '󰂂' :
      (EWW_BATTERY["BAT0"].capacity + EWW_BATTERY["BAT1"].capacity) / 2 < 100 ? '󰁹' : '󰁹'}"
    (revealer :transition "slideleft" :reveal bat
      (scale :value {EWW_BATTERY["BAT0"].capacity}
                        :min 0
                        :max 101
                        :activate true
                        :orientation "h"))
    )))
(defvar bat true)

(defwidget time []
(eventbox :class "time"
          :onclick "swaync-client -t"
          v_time))



(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

(defpoll volume :interval "1s"
  "scripts/getvol")

(defpoll v_time :interval "10s"
  "date '+%H:%M %b %d, %Y'")

(defwindow bar
  :windowtype "dock"
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "10px"
                      :anchor "top center")
  :reserve (struts :side "top" :distance "4%")
  :exclusive true
  (bar))
